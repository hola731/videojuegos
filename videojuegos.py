import time
import statistics
from typing import List, Tuple

class TimingAttackDemo:
    """
    Demostraci√≥n did√°ctica de un Timing Attack 
    
    Un timing attack es una t√©cnica de criptoan√°lisis que explota las diferencias
    en el tiempo de ejecuci√≥n de algoritmos para obtener informaci√≥n secreta.
    """
    
    def __init__(self, password_secreto: str = "SECRETO123"):
        self.password_secreto = password_secreto
        self.intentos_realizados = 0
        
    def comparar_vulnerable(self, intento: str) -> bool:
        """
        Funci√≥n vulnerable a timing attack.
        
        Compara car√°cter por car√°cter y retorna False inmediatamente
        cuando encuentra una diferencia, revelando informaci√≥n sobre
        cu√°ntos caracteres son correctos.
        """
        print(f"üîç Comparando: '{intento}' vs '{self.password_secreto}'")
        
        for i, (caracter_real, caracter_intento) in enumerate(zip(self.password_secreto, intento)):
            if caracter_real != caracter_intento:
                print(f"   ‚ùå Diferencia en posici√≥n {i}: '{caracter_real}' != '{caracter_intento}'")
                return False
            # Simula procesamiento adicional por cada car√°cter correcto
            time.sleep(0.1)
            print(f"   ‚úÖ Car√°cter {i} correcto: '{caracter_real}'")
        
        # Verifica longitud
        if len(intento) != len(self.password_secreto):
            print(f"   ‚ùå Longitud incorrecta: {len(intento)} vs {len(self.password_secreto)}")
            return False
            
        print("   üéâ ¬°Contrase√±a correcta!")
        return True
    
    def comparar_segura(self, intento: str) -> bool:
        """
        Funci√≥n segura contra timing attack.
        
        Siempre toma el mismo tiempo independientemente de la entrada.
        """
        print(f"üîí Comparaci√≥n segura: '{intento}' vs '{self.password_secreto}'")
        
        # Usa comparaci√≥n constante en tiempo
        if len(intento) != len(self.password_secreto):
            time.sleep(0.5)  # Tiempo constante
            return False
        
        resultado = True
        for caracter_real, caracter_intento in zip(self.password_secreto, intento):
            if caracter_real != caracter_intento:
                resultado = False
            # Siempre toma el mismo tiempo
            time.sleep(0.1)
        
        # Tiempo adicional para mantener consistencia
        time.sleep(0.5)
        
        if resultado:
            print("   üéâ ¬°Contrase√±a correcta!")
        else:
            print("   ‚ùå Contrase√±a incorrecta")
            
        return resultado
    
    def ataque_timing(self, caracteres_posibles: str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") -> str:
        """
        Simula un timing attack para descubrir la contrase√±a.
        """
        print("\nüö® INICIANDO TIMING ATTACK")
        print("=" * 50)
        
        password_descubierto = ""
        tiempos_por_caracter = {}
        
        # Para cada posici√≥n en la contrase√±a
        for posicion in range(len(self.password_secreto)):
            print(f"\nüìç Probando posici√≥n {posicion + 1}")
            
            mejor_caracter = None
            mejor_tiempo = 0
            
            # Probar cada car√°cter posible
            for caracter in caracteres_posibles:
                intento = password_descubierto + caracter + "X" * (len(self.password_secreto) - len(password_descubierto) - 1)
                
                # Medir tiempo de respuesta
                tiempo_inicio = time.time()
                self.comparar_vulnerable(intento)
                tiempo_fin = time.time()
                tiempo_respuesta = tiempo_fin - tiempo_inicio
                
                print(f"   '{caracter}' -> {tiempo_respuesta:.3f}s")
                
                # El car√°cter que toma m√°s tiempo es probablemente el correcto
                if tiempo_respuesta > mejor_tiempo:
                    mejor_tiempo = tiempo_respuesta
                    mejor_caracter = caracter
            
            if mejor_caracter:
                password_descubierto += mejor_caracter
                print(f"   üéØ Car√°cter descubierto: '{mejor_caracter}' (tiempo: {mejor_tiempo:.3f}s)")
                tiempos_por_caracter[posicion] = mejor_tiempo
        
        print(f"\nüéâ Contrase√±a descubierta: '{password_descubierto}'")
        print(f"üîë Contrase√±a real: '{self.password_secreto}'")
        print(f"‚úÖ Ataque exitoso: {password_descubierto == self.password_secreto}")
        
        return password_descubierto
    
    def demostrar_diferencia(self):
        """
        Demuestra la diferencia entre implementaciones vulnerables y seguras.
        """
        print("\nüìä DEMOSTRACI√ìN DE DIFERENCIAS")
        print("=" * 50)
        
        # Test con implementaci√≥n vulnerable
        print("\nüî¥ Implementaci√≥n VULNERABLE:")
        intentos_vulnerables = ["A", "S", "SE", "SEC", "SECR", "SECRE", "SECRET", "SECRETO", "SECRETO1", "SECRETO12", "SECRETO123"]
        
        for intento in intentos_vulnerables:
            tiempo_inicio = time.time()
            self.comparar_vulnerable(intento)
            tiempo_fin = time.time()
            print(f"   Tiempo total: {tiempo_fin - tiempo_inicio:.3f}s\n")
        
        # Test con implementaci√≥n segura
        print("\nüü¢ Implementaci√≥n SEGURA:")
        intentos_seguros = ["A", "S", "SE", "SEC", "SECR", "SECRE", "SECRET", "SECRETO", "SECRETO1", "SECRETO12", "SECRETO123"]
        
        for intento in intentos_seguros:
            tiempo_inicio = time.time()
            self.comparar_segura(intento)
            tiempo_fin = time.time()
            print(f"   Tiempo total: {tiempo_fin - tiempo_inicio:.3f}s\n")

def main():
    """
    Funci√≥n principal para ejecutar la demostraci√≥n.
    """
    print("üîê DEMOSTRACI√ìN DID√ÅCTICA: TIMING ATTACK")
    print("=" * 60)
    print("""
    Esta demostraci√≥n muestra c√≥mo un atacante puede explotar
    las diferencias en tiempo de respuesta para descubrir informaci√≥n secreta.
    
    Conceptos clave:
    - Timing Attack: Ataque que explota diferencias temporales
    - Comparaci√≥n vulnerable: Retorna inmediatamente al encontrar diferencias
    - Comparaci√≥n segura: Tiempo constante independiente de la entrada
    """)
    
    # Crear instancia de la demostraci√≥n
    demo = TimingAttackDemo("SECRETO123")
    
    # Mostrar diferencias entre implementaciones
    demo.demostrar_diferencia()
    
    # Ejecutar timing attack
    print("\n" + "=" * 60)
    input("Presiona Enter para ejecutar el timing attack...")
    demo.ataque_timing()
    
    print("\n" + "=" * 60)
    print("""
    üéì LECCIONES APRENDIDAS:
    
    1. Las comparaciones car√°cter por car√°cter pueden revelar informaci√≥n
    2. Los tiempos de respuesta diferentes permiten ataques
    3. Las implementaciones seguras usan tiempo constante
    4. Siempre usar comparaciones seguras en aplicaciones reales
    
    üí° Mejores pr√°cticas:
    - Usar funciones como hmac.compare_digest() en Python
    - Implementar comparaciones de tiempo constante
    - No revelar informaci√≥n a trav√©s de tiempos de respuesta
    """)

if __name__ == "__main__":
    main()